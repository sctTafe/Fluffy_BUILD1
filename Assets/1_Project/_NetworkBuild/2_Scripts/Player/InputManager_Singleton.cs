using System;
using UnityEngine;
using UnityEngine.InputSystem;

/// <summary>
/// Brings the Input from the new input system into a singleton which the controllable objects can link into
/// </summary>
public class InputManager_Singleton: MonoBehaviour {
	public static InputManager_Singleton Instance { get; private set; }
	private void SingletoneSetup() {
		
		if(Instance != null && Instance != this) {
			Destroy(gameObject);
			return;
        }

		Instance = this;
    }


    //Cashed PlayerInput
    public PlayerInput _playerInput; //NOTE TO SELF: Need to write own callbacks using Player Input -> As Written Bellow
	public InputActionV2 _inputActions;  // NOTE TO SELF: autogenerated class which u can set up callbacks easily with


    [Header("Character Input Values")]
	public Vector2 move;
	public Vector2 look;
	public bool jump;
	public bool sprint;

    [Header("Movement Settings")]
	public bool analogMovement;

	[Header("Mouse Cursor Settings")]
	public bool cursorLocked = true;
	public bool cursorInputForLook = true;



    public void Awake() {
		SingletoneSetup();

        _playerInput = GetComponent<PlayerInput>();
        _inputActions = new InputActionV2();

        if (_playerInput == null || _inputActions == null)
            Debug.LogError("InputManager_Singleton: Player Input Null!");

    }

	private void OnEnable()
	{
        
        _inputActions.Player.Enable();
    }

    private void OnDisable()
    {
        _inputActions.Player.Disable();
    }

    void Start() {
		
        //if (TryGetComponent<PlayerInput>(out PlayerInput playerInput))
        //	_playerInput = playerInput;
        //else
        //	Debug.Log("PlayerInput not found!");      
    }





    public void OnMove(InputValue value) {
		MoveInput(value.Get<Vector2>());
	}

	public void OnLook(InputValue value) {
		if (cursorInputForLook) {
			LookInput(value.Get<Vector2>());
		}
	}

	public void OnJump(InputValue value) {
		//Debug.Log("InputManager_Singleton: Jump Pressed: " + value.isPressed);
		JumpInput(value.isPressed);
	}

	public void OnSprint(InputValue value) {
        //Debug.Log("InputManager_Singleton: Sprint Pressed: " + value.isPressed);
        SprintInput(value.isPressed);
	}



    public void MoveInput(Vector2 newMoveDirection) {
		move = newMoveDirection;
	}

	public void LookInput(Vector2 newLookDirection) {
		look = newLookDirection;
	}

	public void JumpInput(bool newJumpState) {
		jump = newJumpState;
	}

	public void SprintInput(bool newSprintState) {
		sprint = newSprintState;
	}

    private void OnApplicationFocus(bool hasFocus) {
		SetCursorState(cursorLocked);
	}

	private void SetCursorState(bool newState) {
		Cursor.lockState = newState ? CursorLockMode.Locked : CursorLockMode.None;
	}
}
